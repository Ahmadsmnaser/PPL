#lang racket/base

//////////////////////////////////////////////////

;; Signature : (append l1 l2) -> list
;; Purpose : Concatenate two lists
;; Type : [ (list Any) , (list Any) -> list Any ]
;; Example : (append '(1 2) '(3 4)) should produce '(1 2 3 4)
;; Pre-conditions : l1 and l2 must be lists
;; Tests :
;; (append '(1 2 3) '(4 5 6)) ; => '(1 2 3 4 5 6)
;; (append '() '(4 5 6)) ; => '(4 5 6)
;; (append '(1 2 3) '()) ; => '(1 2 3)
(define append
    (lambda (l1 l2)
    (if (null? l1)
        l2
        (cons (car l1) (append (cdr l1) l2)))))

//////////////////////////////////////////////////

;; Signature : (reverse l1) -> list
;; Purpose : To reverse the elements of a list
;; Type : [ (list Any) -> list Any ]
;; Example : (reverse '(1 2 3)) should produce '(3 2 1)
;; Pre-conditions : l1 must be list
;; Tests :
;; (reverse '(1 2 3)) ; => '(3 2 1)
;; (reverse '()) ; => '()
;; (reverse '(a b c)) ; => '(c b a)
(define reverse
    (lambda (l1)
        ;; Signature: (reverse-helper list list) -> list
        ;; Type: [(Listof Any) , (Listof Any) -> (Listof Any)]
        ;; Purpose: To accumulate the reversed elements of a list into an accumulator.
        ;; Pre-conditions: The first argument must be a list. The second argument must be an accumulator list.
        (define (reverse-helper l acc)
            (if (null? l)
                acc
                (reverse-helper (cdr l) (cons (car l) acc))))
        (reverse-helper l '())))
(define reverse
    (lambda (l1)
        define (reverse-helper l acc)
        if(null? l1)
        acc
        (reverse-helper (cdr l1) (append (car 1) acc))
    )
)

//////////////////////////////////////////////////

;; Signature: (duplicate-items list list) -> list
;; Type: [(List Any) , (List Number) -> (List Any)]
;; Purpose: To duplicate items in a list according to the given counts.
;; Example: (duplicate-items '(1 2 3) '(2 3 1)) should produce '(1 1 2 2 2 3)
;; Pre-conditions: Both arguments must be lists. The second list contains positive numbers.
;; Tests:
;; (duplicate-items '(1 2 3) '(2 3 1)) ; => '(1 1 2 2 2 3)
;; (duplicate-items '() '()) ; => '()
;; (duplicate-items '(a b c) '(1 1 1)) ; => '(a b c)
(define duplicate-items
    (lambda (l1 l2)
    ;; Signature: (duplicate n item) -> list
    ;; Type: [(Number) , (Any) -> (list Any)]
    ;; Purpose: Creates a list of `n` duplicates of `item`
    ;; Example: (duplicate-items  2 3) should produce '(3 3)
    ;; Pre-conditions: `n` is a non-negative integer
    ;; Tests:
    ;; (duplicate-items  2 3) ; => '(3 3)
    ;; (duplicate-items 1 a) ; => '(a)
 (define (duplicate n item)
      (if (= n 0)
          '()
          (cons item (duplicate (- n 1) item))))
          ;; Signature: (duplicate-helper l1 l2 acc) -> list
          ;; Type: [(listof Any) , (listof Number) , (listof Any) -> (listof Any)]
          ;; Purpose: Recursively processes `l1` and `l2` to construct the final list by appending
          ;; Example; '(1 2 3) '(2 1 3) '()) should produce '(1 1 2 3 3 3)
          ;; duplicated items to the accumulator `acc`
          ;; Pre-conditions: `l2` is a non-empty list of integers
          ;; Tests :
            ;; (duplicate-helper '(1 2 3) '(2 1 3) '()) ; => '(1 1 2 3 3 3)
            ;; (duplicate-helper '() '() '()) ; =>'()
    (define (duplicate-helper l1 l2 acc)
      (if (null? l1)
          (reverse acc)
          (let ((n (car l2)))
            (duplicate-helper (cdr l1)
                              (if (null? (cdr l2)) l2 (cdr l2))
                              (append (reverse (duplicate n (car l1))) acc)))))
    
    (duplicate-helper l1 l2 '())))